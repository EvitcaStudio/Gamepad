/**
 * gamepad@1.0.0 https://github.com/EvitcaStudio/Gamepad
 * Compiled 1/9/2024, 10:53:07 AM UTC
 * 
 * gamepad is licensed under a MIT styled License. See LICENSE.md for more info.
 * 
 * Copyright 2024, Evitca Studio, All Rights Reserved
 */
 var e={d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{v:()=>n});class s{config={buttons:{...s.BUTTONS_MAP}};leftAnalogHeld=!1;rightAnalogHeld=!1;static baseAnalogPos={x:0,y:0};static AXES={LEFT_X:0,LEFT_Y:1,RIGHT_X:2,RIGHT_Y:3};static AXES_REVERSED_MAP=(()=>{var e={};for(const t in s.AXES)e[s.AXES[t]]=t;return e})();static AXIS_UPDATE_RANGE=0;static ANALOG_RELEASE_RANGE=.09;static TRIGGER_PRESSED_VALUE=.12;static PRESSED=1;static UNPRESSED=0;static BUTTONS_MAP={A:0,B:1,X:2,Y:3,LB:4,RB:5,LT:6,RT:7,BACK:8,START:9,LS:10,RS:11,UP:12,DOWN:13,LEFT:14,RIGHT:15,HOME:16,OPTION:17};static BUTTONS_REVERSE_MAP=(()=>{var e={};for(const t in s.BUTTONS_MAP)e[s.BUTTONS_MAP[t]]=t;return e})();static PS4_REMAPPED={A:"CROSS",B:"CIRCLE",X:"SQUARE",Y:"TRIANGLE"};static GAMEPAD_IDS={"Xbox 360 Controller (XInput STANDARD GAMEPAD)":"Xbox","Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 09cc)":"PS","045E-02EA-Microsoft X-Box 360 pad":"Xbox","045E-028E-Microsoft X-Box One pad":"Xbox","045E-02DD-Microsoft X-Box One pad (Firmware 2015)":"Xbox","054C-05C4-Sony Computer Entertainment Wireless Controller":"PS","054C-09CC-Sony PLAYSTATION(R)3 Controller":"PS","057E-2009-Switch Pro Controller":"NS","06A3-0D09-Logitech F310 Gamepad (XInput)":"PC","06A3-0D0A-Logitech F510 Gamepad (XInput)":"PC","06A3-0D0B-Logitech F710 Gamepad (XInput)":"PC","0738-4716-Controller (Xbox Wireless Receiver for Windows)":"Xbox","0796-5510-DualShock 4 Wireless Controller":"PS","0E6F-0213-PS3/PC Gamepad":"PS","0E6F-0501-XInput Gamepad":"PC","0E6F-0801-PS4 Wired Gamepad":"PS","24C6-5503-NAAC Wired Compact Controller for PS":"PS","2DC8-6101-Moga Pro":"Android","2DC8-7101-Moga Hero Power":"Android","2DC8-9101-Moga Power Pro":"Android","2DC8-F101-Moga Pro Power":"Android","2DC8-F301-Moga Hero Power (B) ":"Android","24C6-541A-Revolution Pro Controller":"PS","146B-0601-PC Gamepad":"PC"};pressed=(()=>{var e={...s.BUTTONS_MAP};for(const t in e)e[t]=!1;return e})();info={axes:null,buttons:null,previousButtonState:[],previousAxesState:[],initialAxesStickDrift:[]};leftAnalogPos={x:0,y:0};rightAnalogPos={x:0,y:0};pressHandlers={};releaseHandlers={};axisHandlers={};constructor(e){this.gamepad=e,this.type=s.GAMEPAD_IDS[this.gamepad.id]||"Generic"}getType(){return this.type}updateState(e){const{buttons:t,axes:i}=e;this.info.buttons=t,this.info.axes=i;for(let e=0;e<t.length;e++){const s=t[e].pressed&&this.info.previousButtonState[e],i=t[e].value;this.handleButtonInput(e,i,s,t[e].pressed),this.info.previousButtonState[e]=t[e].pressed}for(let t=0;t<i.length;t++){var a=i[t];if(a>=-s.ANALOG_RELEASE_RANGE&&a<=s.ANALOG_RELEASE_RANGE&&a===this.info.previousAxesState[t]&&0!==a&&-0!==a)switch(this.info.previousAxesState[t]=void 0,this.info.initialAxesStickDrift[t]=void 0,s.AXES_REVERSED_MAP[t]){case"LEFT_X":case"LEFT_Y":this.leftAnalogHeld&&(this.leftAnalogHeld=!1,this.handleDropAnalog("LEFT"));break;case"RIGHT_X":case"RIGHT_Y":this.rightAnalogHeld&&(this.rightAnalogHeld=!1,this.handleDropAnalog("RIGHT"))}var o=this.info.initialAxesStickDrift[t]!==a&&a===this.info.previousAxesState[t]&&0!==a&&-0!==a,r=void 0!==this.info.previousAxesState[t];let e=!1;var n=void 0!==this.info.initialAxesStickDrift[t]&&a!==this.info.initialAxesStickDrift[t];if(r?e=Math.abs(a-this.info.previousAxesState[t])>=s.AXIS_UPDATE_RANGE:n?e=Math.abs(a-this.info.initialAxesStickDrift[t])>=s.AXIS_UPDATE_RANGE:this.info.initialAxesStickDrift[t]=a,n&&(e=Math.abs(a-this.info.initialAxesStickDrift[t])>=s.AXIS_UPDATE_RANGE),o||e){switch(s.AXES_REVERSED_MAP[t]){case"LEFT_X":case"LEFT_Y":this.leftAnalogHeld||r||(this.leftAnalogHeld=!0,this.handleGrabAnalog("LEFT"));break;case"RIGHT_X":case"RIGHT_Y":this.rightAnalogHeld||r||(this.rightAnalogHeld=!0,this.handleGrabAnalog("RIGHT"))}this.handleAxisInput(t,a,o),this.info.previousAxesState[t]=a}}}getPressed(){var e=[];for(const t in this.pressed)this.pressed[t]&&e.push(t);return e}on(e,t){if("string"==typeof e)if("function"==typeof t)switch(e){case"press":this.pressHandlers[e]=t;break;case"release":this.releaseHandlers[e]=t;break;case"axis":case"grab":case"drop":this.axisHandlers[e]=t;break;default:n.logger.prefix("Gamepad-Module").error(`The event "${e}" is not supported.`)}else n.logger.prefix("Gamepad-Module").error(`The callback for event "${e}" is not a function.`);return this}off(e){if("string"==typeof e)if("function"==typeof pCallback)switch(e){case"press":this.pressHandlers[e]=null;break;case"release":this.releaseHandlers[e]=null;break;case"axis":case"grab":case"drop":this.axisHandlers[e]=null;break;default:n.logger.prefix("Gamepad-Module").error(`The event "${e}" is not supported.`)}else n.logger.prefix("Gamepad-Module").error(`The callback for event "${e}" is not a function.`);return this}handleButtonInput(e,t,i,a){let o=e,r=Math.floor(100*t)/100;for(const t in this.config.buttons)if(this.config.buttons[t]===e){o=t,(a||r>s.UNPRESSED)&&(this.pressed[o]=!0);break}"A"!==o&&"B"!==o&&"X"!==o&&"Y"!==o||"PS"===this.type&&(o=s.PS4_REMAPPED[o]),o&&(r<=s.PRESSED&&r>s.UNPRESSED?"function"==typeof this.pressHandlers.press&&this.pressHandlers.press(o,r,i):(r===s.UNPRESSED&&("LT"===o||"RT"===o)&&this.pressed[o]||r===s.UNPRESSED&&this.pressed[o])&&("function"==typeof this.releaseHandlers.release&&this.releaseHandlers.release(o,r),this.pressed[o]=!1))}handleAxisInput(e,t,i){let a=e,o=Math.floor(100*t)/100;for(const t in s.AXES)s.AXES[t]===e&&(a=t);let r=0;"LEFT_X"!==a&&"LEFT_Y"!==a||("LEFT_X"===a&&(this.leftAnalogPos.x=o),"LEFT_Y"===a&&(this.leftAnalogPos.y=o),r=n.constructor.getAngle(s.baseAnalogPos,this.leftAnalogPos)),"RIGHT_X"!==a&&"RIGHT_Y"!==a||("RIGHT_X"===a&&(this.rightAnalogPos.x=o),"RIGHT_Y"===a&&(this.rightAnalogPos.y=o),r=n.constructor.getAngle(s.baseAnalogPos,this.rightAnalogPos)),a&&"function"==typeof this.axisHandlers.axis&&this.axisHandlers.axis(a,o,r,i)}handleGrabAnalog(e){e&&"function"==typeof this.axisHandlers.grab&&this.axisHandlers.grab(e)}handleDropAnalog(e){e&&"function"==typeof this.axisHandlers.drop&&this.axisHandlers.drop(e)}isLeftAnalogHeld(){return this.leftAnalogHeld}isRightAnalogHeld(){return this.rightAnalogHeld}isButtonPressed(e){return this.pressed[e]}vibrate(e="dual-rumble",t=0,s=1e3,i=1,a=1){"vibrationActuator"in this.gamepad&&this.gamepad.vibrationActuator.playEffect(e="dual-rumble"===e&&"vibration"===e?e:"dual-rumble",{startDelay:t,duration:s,weakMagnitude:i,strongMagnitude:a})}pulse(e=1,t=200){"hapticActuators"in this.gamepad&&this.gamepad.hapticActuators[0].pulse(e,t)}}var i={d:(e,t)=>{for(var s in t)i.o(t,s)&&!i.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},o={};i.d(o,{Y:()=>a});class a{constructor(e){this.RESET="[0m",this.BRIGHT="[1m",this.DIM="[2m",this.UNDERSCORE="[4m",this.BLINK="[5m",this.REVERSE="[7m",this.HIDDEN="[8m",this.FG_BLACK="[30m",this.FG_RED="[31m",this.FG_GREEN="[32m",this.FG_YELLOW="[33m",this.FG_BLUE="[34m",this.FG_MAGENTA="[35m",this.FG_CYAN="[36m",this.FG_WHITE="[37m",this.FG_GRAY="[90m",this.BG_BLACK="[40m",this.BG_RED="[41m",this.BG_GREEN="[42m",this.BG_YELLOW="[43m",this.BG_BLUE="[44m",this.BG_MAGENTA="[45m",this.BG_CYAN="[46m",this.BG_WHITE="[47m",this.BG_GRAY="[100m",this.TYPE_SPACER_LENGTH=13,this.types={default:this.FG_WHITE},this.currentType="",this.SPACE_CHAR=" ",this.FG_COLORS={};for(let e=0;e<=255;e++)this.FG_COLORS[e]="[38;5;"+e+"m";this.BG_COLORS={};for(let e=0;e<=255;e++)this.BG_COLORS[e]="[48;5;"+e+"m";Array.isArray(e)&&this.registerTypes(e)}prefix(e){return"string"==typeof e&&(this.currentType=e),this}message(t="log",...s){var i=this.currentType||"";if(0===i.length)console[t](...s);else{var a=i.length>=this.TYPE_SPACER_LENGTH;let e=this.types[i.toLowerCase()]?this.types[i.toLowerCase()]:this.types.default;var o=e.includes("");o||(e="color: "+e),!globalThis.window||o?console[t](e+i+this.SPACE_CHAR.repeat(Math.max(this.TYPE_SPACER_LENGTH-i.length,a?1:0))+"|"+this.RESET,...s):console[t]("%c"+i+this.SPACE_CHAR.repeat(Math.max(this.TYPE_SPACER_LENGTH-i.length,a?1:0))+"|",e,...s)}this.currentType=""}log(...e){this.message("log",...e)}info(...e){this.message("info",...e)}error(...e){this.message("error",...e)}warn(...e){this.message("warn",...e)}assert(...e){console.assert(...e)}debug(...e){this.message("debug",...e)}count(e){console.count(e)}countReset(e){console.countReset(e)}table(e,t){console.table(e,t)}time(e){this.message("time",e)}timeLog(e){this.message("timeLog",e)}timeEnd(e){this.message("timeEnd",e)}trace(...e){this.message("trace",...e)}group(e){this.message("group",e)}groupCollapsed(e){console.groupCollapsed(e)}groupEnd(){console.groupEnd()}clear(){console.clear()}registerType(e,t){this.types[e]||"string"==typeof e&&"string"==typeof t&&(this.types[e.toLowerCase()]=t)}registerTypes(t){if(Array.isArray(t))for(let e=0;e<t.length;e++)this.registerType(t[e].type,t[e].ansi)}unregisterType(e){this.types[e]&&delete this.types[e]}}var r=o.Y;const n=new class{controllers={};connectHandler={};disconnectHandler={};version="1.0.0";constructor(){this.logger=new r,this.logger.registerType("Gamepad-Module","#ff6600"),this.handleGamepadConnected=this.handleGamepadConnected.bind(this),this.handleGamepadDisconnected=this.handleGamepadDisconnected.bind(this),this.pollGamepadState=this.pollGamepadState.bind(this),"getGamepads"in navigator?(window.addEventListener("gamepadconnected",this.handleGamepadConnected),window.addEventListener("gamepaddisconnected",this.handleGamepadDisconnected),requestAnimationFrame(this.pollGamepadState)):this.logger.prefix("Gamepad-Module").warn("Gamepad API not supported in this browser.")}static getAngle(e,t){var s=e.y-t.y,e=e.x-t.x;return-Math.atan2(s,e)-Math.PI}getMainController(){return this.controllers[0]}getControllers(){return{...this.controllers}}on(e,t){if("string"==typeof e)if("function"==typeof t)switch(e){case"connect":this.connectHandler[e]=t;break;case"disconnect":this.disconnectHandler[e]=t;break;default:this.logger.prefix("Gamepad-Module").error(`The event "${e}" is not supported.`)}else this.logger.prefix("Gamepad-Module").error(`The callback for event "${e}" is not a function.`);return this}handleGamepadConnected(e){this.controllers[e.gamepad.index]=new s(e.gamepad),"function"==typeof this.connectHandler.connect&&this.connectHandler.connect(this.controllers[e.gamepad.index])}handleGamepadDisconnected(e){"function"==typeof this.disconnectHandler.disconnect&&this.disconnectHandler.disconnect(this.controllers[e.gamepad.index]),delete this.controllers[e.gamepad.index]}pollGamepadState(){const e=navigator.getGamepads();if(e){for(const t of e)if(t)for(const e in this.controllers)t.index===this.controllers[e].gamepad.index&&this.controllers[e].updateState(t);requestAnimationFrame(this.pollGamepadState)}}};var l=t.v;export{l as GamepadManager};