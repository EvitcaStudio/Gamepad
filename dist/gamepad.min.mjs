/**
 * gamepad@1.0.0 https://github.com/EvitcaStudio/Gamepad
 * Compiled 1/9/2024, 10:44:32 AM UTC
 * 
 * gamepad is licensed under a MIT styled License. See LICENSE.md for more info.
 * 
 * Copyright 2024, Evitca Studio, All Rights Reserved
 */
 var e={d:(t,s)=>{for(var n in s)e.o(s,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:s[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{v:()=>i});class s{controllers={};connectHandler={};disconnectHandler={};constructor(){this.handleGamepadConnected=this.handleGamepadConnected.bind(this),this.handleGamepadDisconnected=this.handleGamepadDisconnected.bind(this),this.pollGamepadState=this.pollGamepadState.bind(this),"getGamepads"in navigator?(window.addEventListener("gamepadconnected",this.handleGamepadConnected),window.addEventListener("gamepaddisconnected",this.handleGamepadDisconnected),requestAnimationFrame(this.pollGamepadState)):console.warn("Gamepad API not supported in this browser.")}static getAngle(e,t){var s=e.y-t.y,e=e.x-t.x;return-Math.atan2(s,e)-Math.PI}getMainController(){return this.controllers[0]}getControllers(){return{...this.controllers}}on(e,t){if("string"==typeof e)if("function"==typeof t)switch(e){case"connect":this.connectHandler[e]=t;break;case"disconnect":this.disconnectHandler[e]=t;break;default:console.error(`The event "${e}" is not supported.`)}else console.error(`The callback for event "${e}" is not a function.`);return this}handleGamepadConnected(e){this.controllers[e.gamepad.index]=new n(e.gamepad),"function"==typeof this.connectHandler.connect&&this.connectHandler.connect(this.controllers[e.gamepad.index])}handleGamepadDisconnected(e){"function"==typeof this.disconnectHandler.disconnect&&this.disconnectHandler.disconnect(this.controllers[e.gamepad.index]),delete this.controllers[e.gamepad.index]}pollGamepadState(){const e=navigator.getGamepads();if(e){for(const t of e)if(t)for(const e in this.controllers)t.index===this.controllers[e].gamepad.index&&this.controllers[e].updateState(t);requestAnimationFrame(this.pollGamepadState)}}}class n{config={buttons:{...n.BUTTONS_MAP}};leftAnalogHeld=!1;rightAnalogHeld=!1;static baseAnalogPos={x:0,y:0};static AXES={LEFT_X:0,LEFT_Y:1,RIGHT_X:2,RIGHT_Y:3};static AXES_REVERSED_MAP=(()=>{var e={};for(const t in n.AXES)e[n.AXES[t]]=t;return e})();static AXIS_UPDATE_RANGE=0;static ANALOG_RELEASE_RANGE=.09;static TRIGGER_PRESSED_VALUE=.12;static PRESSED=1;static UNPRESSED=0;static BUTTONS_MAP={A:0,B:1,X:2,Y:3,LB:4,RB:5,LT:6,RT:7,BACK:8,START:9,LS:10,RS:11,UP:12,DOWN:13,LEFT:14,RIGHT:15,HOME:16,OPTION:17};static BUTTONS_REVERSE_MAP=(()=>{var e={};for(const t in n.BUTTONS_MAP)e[n.BUTTONS_MAP[t]]=t;return e})();static PS4_REMAPPED={A:"CROSS",B:"CIRCLE",X:"SQUARE",Y:"TRIANGLE"};static GAMEPAD_IDS={"Xbox 360 Controller (XInput STANDARD GAMEPAD)":"Xbox","Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 09cc)":"PS","045E-02EA-Microsoft X-Box 360 pad":"Xbox","045E-028E-Microsoft X-Box One pad":"Xbox","045E-02DD-Microsoft X-Box One pad (Firmware 2015)":"Xbox","054C-05C4-Sony Computer Entertainment Wireless Controller":"PS","054C-09CC-Sony PLAYSTATION(R)3 Controller":"PS","057E-2009-Switch Pro Controller":"NS","06A3-0D09-Logitech F310 Gamepad (XInput)":"PC","06A3-0D0A-Logitech F510 Gamepad (XInput)":"PC","06A3-0D0B-Logitech F710 Gamepad (XInput)":"PC","0738-4716-Controller (Xbox Wireless Receiver for Windows)":"Xbox","0796-5510-DualShock 4 Wireless Controller":"PS","0E6F-0213-PS3/PC Gamepad":"PS","0E6F-0501-XInput Gamepad":"PC","0E6F-0801-PS4 Wired Gamepad":"PS","24C6-5503-NAAC Wired Compact Controller for PS":"PS","2DC8-6101-Moga Pro":"Android","2DC8-7101-Moga Hero Power":"Android","2DC8-9101-Moga Power Pro":"Android","2DC8-F101-Moga Pro Power":"Android","2DC8-F301-Moga Hero Power (B) ":"Android","24C6-541A-Revolution Pro Controller":"PS","146B-0601-PC Gamepad":"PC"};pressed=(()=>{var e={...n.BUTTONS_MAP};for(const t in e)e[t]=!1;return e})();info={axes:null,buttons:null,previousButtonState:[],previousAxesState:[],initialAxesStickDrift:[]};version="1.0.0";leftAnalogPos={x:0,y:0};rightAnalogPos={x:0,y:0};pressHandlers={};releaseHandlers={};axisHandlers={};constructor(e){this.gamepad=e,this.type=n.GAMEPAD_IDS[this.gamepad.id]||"Generic"}getType(){return this.type}updateState(e){const{buttons:t,axes:s}=e;this.info.buttons=t,this.info.axes=s;for(let e=0;e<t.length;e++){const s=t[e].pressed&&this.info.previousButtonState[e],n=t[e].value;this.handleButtonInput(e,n,s,t[e].pressed),this.info.previousButtonState[e]=t[e].pressed}for(let t=0;t<s.length;t++){var a=s[t];if(a>=-n.ANALOG_RELEASE_RANGE&&a<=n.ANALOG_RELEASE_RANGE&&a===this.info.previousAxesState[t]&&0!==a&&-0!==a)switch(this.info.previousAxesState[t]=void 0,this.info.initialAxesStickDrift[t]=void 0,n.AXES_REVERSED_MAP[t]){case"LEFT_X":case"LEFT_Y":this.leftAnalogHeld&&(this.leftAnalogHeld=!1,this.handleDropAnalog("LEFT"));break;case"RIGHT_X":case"RIGHT_Y":this.rightAnalogHeld&&(this.rightAnalogHeld=!1,this.handleDropAnalog("RIGHT"))}var i=this.info.initialAxesStickDrift[t]!==a&&a===this.info.previousAxesState[t]&&0!==a&&-0!==a,o=void 0!==this.info.previousAxesState[t];let e=!1;var r=void 0!==this.info.initialAxesStickDrift[t]&&a!==this.info.initialAxesStickDrift[t];if(o?e=Math.abs(a-this.info.previousAxesState[t])>=n.AXIS_UPDATE_RANGE:r?e=Math.abs(a-this.info.initialAxesStickDrift[t])>=n.AXIS_UPDATE_RANGE:this.info.initialAxesStickDrift[t]=a,r&&(e=Math.abs(a-this.info.initialAxesStickDrift[t])>=n.AXIS_UPDATE_RANGE),i||e){switch(n.AXES_REVERSED_MAP[t]){case"LEFT_X":case"LEFT_Y":this.leftAnalogHeld||o||(this.leftAnalogHeld=!0,this.handleGrabAnalog("LEFT"));break;case"RIGHT_X":case"RIGHT_Y":this.rightAnalogHeld||o||(this.rightAnalogHeld=!0,this.handleGrabAnalog("RIGHT"))}this.handleAxisInput(t,a,i),this.info.previousAxesState[t]=a}}}getPressed(){var e=[];for(const t in this.pressed)this.pressed[t]&&e.push(t);return e}on(e,t){if("string"==typeof e)if("function"==typeof t)switch(e){case"press":this.pressHandlers[e]=t;break;case"release":this.releaseHandlers[e]=t;break;case"axis":case"grab":case"drop":this.axisHandlers[e]=t;break;default:console.error(`The event "${e}" is not supported.`)}else console.error(`The callback for event "${e}" is not a function.`);return this}off(e){if("string"==typeof e)if("function"==typeof pCallback)switch(e){case"press":this.pressHandlers[e]=null;break;case"release":this.releaseHandlers[e]=null;break;case"axis":case"grab":case"drop":this.axisHandlers[e]=null;break;default:console.error(`The event "${e}" is not supported.`)}else console.error(`The callback for event "${e}" is not a function.`);return this}handleButtonInput(e,t,s,a){let i=e,o=Math.floor(100*t)/100;for(const t in this.config.buttons)if(this.config.buttons[t]===e){i=t,(a||o>n.UNPRESSED)&&(this.pressed[i]=!0);break}"A"!==i&&"B"!==i&&"X"!==i&&"Y"!==i||"PS"===this.type&&(i=n.PS4_REMAPPED[i]),i&&(o<=n.PRESSED&&o>n.UNPRESSED?"function"==typeof this.pressHandlers.press&&this.pressHandlers.press(i,o,s):(o===n.UNPRESSED&&("LT"===i||"RT"===i)&&this.pressed[i]||o===n.UNPRESSED&&this.pressed[i])&&("function"==typeof this.releaseHandlers.release&&this.releaseHandlers.release(i,o),this.pressed[i]=!1))}handleAxisInput(e,t,a){let i=e,o=Math.floor(100*t)/100;for(const t in n.AXES)n.AXES[t]===e&&(i=t);let r=0;"LEFT_X"!==i&&"LEFT_Y"!==i||("LEFT_X"===i&&(this.leftAnalogPos.x=o),"LEFT_Y"===i&&(this.leftAnalogPos.y=o),r=s.getAngle(n.baseAnalogPos,this.leftAnalogPos)),"RIGHT_X"!==i&&"RIGHT_Y"!==i||("RIGHT_X"===i&&(this.rightAnalogPos.x=o),"RIGHT_Y"===i&&(this.rightAnalogPos.y=o),r=s.getAngle(n.baseAnalogPos,this.rightAnalogPos)),i&&"function"==typeof this.axisHandlers.axis&&this.axisHandlers.axis(i,o,r,a)}handleGrabAnalog(e){e&&"function"==typeof this.axisHandlers.grab&&this.axisHandlers.grab(e)}handleDropAnalog(e){e&&"function"==typeof this.axisHandlers.drop&&this.axisHandlers.drop(e)}isLeftAnalogHeld(){return this.leftAnalogHeld}isRightAnalogHeld(){return this.rightAnalogHeld}isButtonPressed(e){return this.pressed[e]}vibrate(e="dual-rumble",t=0,s=1e3,n=1,a=1){"vibrationActuator"in this.gamepad&&this.gamepad.vibrationActuator.playEffect(e="dual-rumble"===e&&"vibration"===e?e:"dual-rumble",{startDelay:t,duration:s,weakMagnitude:n,strongMagnitude:a})}pulse(e=1,t=200){"hapticActuators"in this.gamepad&&this.gamepad.hapticActuators[0].pulse(e,t)}}const i=new s;var a=t.v;export{a as GamepadManager};