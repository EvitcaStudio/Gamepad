[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/controller.mjs",
    "content": "import { GamepadManager } from './gamepad.mjs';\r\n\r\nclass Controller {\r\n\t/**\r\n\t * Configuration of which buttons / analogs map to which indexes\r\n\t * \r\n\t * @type {object}\r\n\t */\r\n\tconfig = {\r\n\t\t// Buttons\r\n\t\tbuttons: (() => { return { ...Controller.BUTTONS_MAP }})()\r\n\t}\r\n\t/**\r\n\t * Whether the left analog is currently being held\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\tleftAnalogHeld = false;\r\n\t/**\r\n\t * Whether the right analog is currently being held\r\n\t * \r\n\t * @type {boolean}\r\n\t */\r\n\trightAnalogHeld = false;\r\n\t/**\r\n\t * The base analogs position when it is not in use\r\n\t */\r\n\tstatic baseAnalogPos = { x: 0, y: 0 };\r\n\t/**\r\n\t * Analog thumb sticks\r\n\t * \r\n\t * @type {object}\r\n\t */\r\n\tstatic AXES = {\r\n\t\t'LEFT_X': 0, // Left axis\r\n\t\t'LEFT_Y': 1, // Left axis \r\n\t\t'RIGHT_X': 2,\r\n\t\t'RIGHT_Y': 3,\r\n\t}\r\n\r\n\tstatic AXES_REVERSED_MAP = (() => { \r\n\t\tconst reversedMap = {};\r\n\t\tfor (const axis in Controller.AXES) {\r\n\t\t\tconst index = Controller.AXES[axis];\r\n\t\t\treversedMap[index] = axis;\r\n\t\t}\r\n\t\treturn reversedMap;\r\n\t})()\r\n\t/**\r\n\t * The range at which axis changes are detected\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tstatic AXIS_UPDATE_RANGE = 0.0; // 0.2\r\n\t/**\r\n\t * The range at which the analog is considered to be dropped -0.09 - 0.09\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tstatic ANALOG_RELEASE_RANGE = 0.09;\r\n\t/**\r\n\t * The value at which holding a trigger (LT OR RT) will consider it being pressed\r\n\t */\r\n\tstatic TRIGGER_PRESSED_VALUE = 0.12;\r\n\t/**\r\n\t * Value to indicate a pressed button\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tstatic PRESSED = 1.0;\r\n\t/**\r\n\t * Value to indicate a button is not pressed\r\n\t * \r\n\t * @type {number}\r\n\t */\r\n\tstatic UNPRESSED = 0.0;\r\n\t/**\r\n\t * A button map that maps common button names to the indexes the computer knows them as\r\n\t */\r\n\tstatic BUTTONS_MAP = {\r\n\t\t'A': 0, // Main action button (⨉) PS4\r\n\t\t'B': 1, // Secondary action button (Ο) PS4\r\n\t\t'X': 2, // Third action button (▢) PS4\r\n\t\t'Y': 3, // Fourth action button (∆) PS4\r\n\t\t'LB': 4, // Left bumper or shoulder button\r\n\t\t'RB': 5, // Right bumper or shoulder button\r\n\t\t'LT': 6, // Left trigger button (analog)\r\n\t\t'RT': 7, // Right trigger button (analog)\r\n\t\t'BACK': 8, // Back button\r\n\t\t'START': 9, // Start button\r\n\t\t'LS': 10, // Click of the left stick L3\r\n\t\t'RS': 11, // Click of the right stick R3\r\n\t\t'UP': 12, // D-pad up\r\n\t\t'DOWN': 13, // D-pad down\r\n\t\t'LEFT': 14, // D-pad left\r\n\t\t'RIGHT': 15, // D-pad right\r\n\t\t'HOME': 16, // Home button (not available on all controllers)\r\n\t\t'OPTION': 17 // Option button (not available on all controllers)\r\n\t}\r\n\t/**\r\n\t * A reverse map of the button names\r\n\t * \r\n\t * @type {object}\r\n\t */\r\n\tstatic BUTTONS_REVERSE_MAP = (() => { \r\n\t\tconst reversedMap = {};\r\n\t\tfor (const button in Controller.BUTTONS_MAP) {\r\n\t\t\tconst index = Controller.BUTTONS_MAP[button];\r\n\t\t\treversedMap[index] = button;\r\n\t\t}\r\n\t\treturn reversedMap;\r\n\t})()\r\n\t/**\r\n\t * A small remapped version of the controllers button_map with PS4 alternatives\r\n\t * \r\n\t * @type {object}\r\n\t */\r\n\tstatic PS4_REMAPPED = {\r\n\t\t'A': 'CROSS', // Main action button (⨉) PS4\r\n\t\t'B': 'CIRCLE', // Secondary action button (Ο) PS4\r\n\t\t'X': 'SQUARE', // Third action button (▢) PS4\r\n\t\t'Y': 'TRIANGLE', // Fourth action button (∆) PS4\t\t\r\n\t}\r\n\t/**\r\n\t * PS: Playstation vendor\r\n\t * Xbox: XBOX vendor\r\n\t * PC: Computer PC vendor\r\n\t * Android: Android device vendor\r\n\t * \r\n\t * @type {object}\r\n\t */\r\n\tstatic GAMEPAD_IDS = {\r\n\t\t'Xbox 360 Controller (XInput STANDARD GAMEPAD)': 'Xbox',\r\n\t\t'Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 09cc)': 'PS',\r\n\t\t'045E-02EA-Microsoft X-Box 360 pad': 'Xbox',\r\n\t\t'045E-028E-Microsoft X-Box One pad': 'Xbox',\r\n\t\t'045E-02DD-Microsoft X-Box One pad (Firmware 2015)': 'Xbox',\r\n\t\t'054C-05C4-Sony Computer Entertainment Wireless Controller': 'PS',\r\n\t\t'054C-09CC-Sony PLAYSTATION(R)3 Controller': 'PS',\r\n\t\t'057E-2009-Switch Pro Controller': 'NS', // Nintendo Switch\r\n\t\t'06A3-0D09-Logitech F310 Gamepad (XInput)': 'PC',\r\n\t\t'06A3-0D0A-Logitech F510 Gamepad (XInput)': 'PC',\r\n\t\t'06A3-0D0B-Logitech F710 Gamepad (XInput)': 'PC',\r\n\t\t'0738-4716-Controller (Xbox Wireless Receiver for Windows)': 'Xbox',\r\n\t\t'0796-5510-DualShock 4 Wireless Controller': 'PS',\r\n\t\t'0E6F-0213-PS3/PC Gamepad': 'PS',\r\n\t\t'0E6F-0501-XInput Gamepad': 'PC',\r\n\t\t'0E6F-0801-PS4 Wired Gamepad': 'PS',\r\n\t\t'24C6-5503-NAAC Wired Compact Controller for PS': 'PS',\r\n\t\t'2DC8-6101-Moga Pro': 'Android',\r\n\t\t'2DC8-7101-Moga Hero Power': 'Android',\r\n\t\t'2DC8-9101-Moga Power Pro': 'Android',\r\n\t\t'2DC8-F101-Moga Pro Power': 'Android',\r\n\t\t'2DC8-F301-Moga Hero Power (B) ': 'Android',\r\n\t\t'24C6-541A-Revolution Pro Controller': 'PS',\r\n\t\t'146B-0601-PC Gamepad': 'PC'\r\n\t};\r\n\t/**\r\n\t * Object full of the currently held down buttons\r\n\t * \r\n\t * @type {object}\r\n\t */\r\n\tpressed = (() => {\r\n\t\tconst buttonMap = { ...Controller.BUTTONS_MAP };\r\n\t\tfor (const key in buttonMap) {\r\n\t\t\tbuttonMap[key] = false;\r\n\t\t}\r\n\t\treturn buttonMap;\r\n\t})()\r\n\t/**\r\n\t * Info about the controller\r\n\t * \r\n\t * @type {object}\r\n\t */\r\n\tinfo = {\r\n\t\taxes: null,\r\n\t\tbuttons: null,\r\n\t\tpreviousButtonState: [],\r\n\t\tpreviousAxesState: [],\r\n\t\tinitialAxesStickDrift: []\r\n\t}\r\n\t/**\r\n\t * The left analogs position\r\n\t */\r\n\tleftAnalogPos = { x: 0, y: 0 };\r\n\t/**\r\n\t * The right analogs position\r\n\t */\r\n\trightAnalogPos = { x: 0, y: 0 };\r\n\t/**\r\n\t * Object of stored callback that will call when a button is pressed\r\n\t * \r\n\t * @type {Object}\r\n\t */\r\n\tpressHandlers = {};\r\n\t/**\r\n\t * Object of stored callback that will call when a button is released\r\n\t * \r\n\t * @type {Object}\r\n\t */\r\n\treleaseHandlers = {};\r\n\t/**\r\n\t * Object of stored callbacks that will call when the axis is changed\r\n\t * \r\n\t * @type {Object}\r\n\t */\r\n\taxisHandlers = {};\r\n\t/**\r\n\t * Creates a new controller instance and passes the gamepad it will be created with\r\n\t * \r\n\t * @param {Gamepad} pGamepad - A gamepad object\r\n\t */\r\n\tconstructor(pGamepad) {\r\n\t\tthis.gamepad = pGamepad;\r\n\t\tthis.type = Controller.GAMEPAD_IDS[this.gamepad.id] ? Controller.GAMEPAD_IDS[this.gamepad.id] : 'Generic';\r\n\t}\r\n\t/**\r\n\t * Returns the type the controller is. PC / PS / Xbox / Android\r\n\t * \r\n\t * @returns {string}\r\n\t */\r\n\tgetType() {\r\n\t\treturn this.type;\r\n\t}\r\n\t/**\r\n\t * Update the state of this controller with the latest polled information\r\n\t * \r\n\t * @param {Gamepad} - The gamepad with the new updated state\r\n\t * @param {Controller} - The gamepad controller instance\r\n\t */\r\n\tupdateState(pGamepad) {\r\n\t\tconst { buttons: newButtonState, axes: newAxesState } = pGamepad;\r\n\r\n\t\t// Update the controllers info with the latest state (not the gamepad, as those are read only vars)\r\n\t\tthis.info.buttons = newButtonState;\r\n\t\tthis.info.axes = newAxesState;\r\n\r\n\t\t// Loop through buttons and check for button and axis changes\r\n\t\tfor (let i = 0; i < newButtonState.length; i++) {\r\n\t\t\t// Get the button data\r\n\t\t\tconst buttonStillHeld = (newButtonState[i].pressed && this.info.previousButtonState[i]);\r\n\t\t\tconst buttonValue = newButtonState[i].value;\r\n\t\t\tthis.handleButtonInput(i, buttonValue, buttonStillHeld, newButtonState[i].pressed);\r\n\t\t\tthis.info.previousButtonState[i] = newButtonState[i].pressed;\r\n\t\t}\r\n\r\n\t\t// Loop through the axis and check for changes\r\n\t\t/**\r\n\t\t * Changes will almost always occur, so to prevent this spammy behavior we check in ranges. This range can be tweaked 0.0 is default\r\n\t\t */\r\n\t\t/**\r\n\t\t * @todo Stop using a for loop and check the axis manually, it is only 4. Two for left, and two for right, no loop is needed and will allow less events to be called due to it manually being checked than looped 4 times when their is \r\n\t\t * really only two axis. 2x the events are being checked for and called.\r\n\t\t */\r\n\t\tfor (let i = 0; i < newAxesState.length; i++) {\r\n\t\t\t// Check and see if the axis value changed significantly, we can tweak this value or maybe set it to a user defined value?\r\n\t\t\t// We also check if this value is set, if not we allow it to be set with the current data\r\n\t\t\t// The current axis\r\n\t\t\tlet currentAxis = newAxesState[i];\r\n\t\t\t// IF the analog crosses this range, then it has been \"dropped\".\r\n\t\t\tif (currentAxis >= -Controller.ANALOG_RELEASE_RANGE && currentAxis <= Controller.ANALOG_RELEASE_RANGE && (currentAxis === this.info.previousAxesState[i]) && (currentAxis !== 0 && currentAxis !== -0)) {\r\n\t\t\t\tthis.info.previousAxesState[i] = undefined;\r\n\t\t\t\tthis.info.initialAxesStickDrift[i] = undefined;\r\n\r\n\t\t\t\tswitch (Controller.AXES_REVERSED_MAP[i]) {\r\n\t\t\t\t\tcase 'LEFT_X':\r\n\t\t\t\t\tcase 'LEFT_Y':\r\n\t\t\t\t\t\tif (this.leftAnalogHeld) {\r\n\t\t\t\t\t\t\tthis.leftAnalogHeld = false;\r\n\t\t\t\t\t\t\tthis.handleDropAnalog('LEFT');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'RIGHT_X':\r\n\t\t\t\t\tcase 'RIGHT_Y':\r\n\t\t\t\t\t\tif (this.rightAnalogHeld) {\r\n\t\t\t\t\t\t\tthis.rightAnalogHeld = false;\r\n\t\t\t\t\t\t\tthis.handleDropAnalog('RIGHT');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Check if this axis has been held for more than one tick. And only if the axis is not 0. An axis of 0 means the analog is not being moved at all.\r\n\t\t\tconst axisStillHeld = (this.info.initialAxesStickDrift[i] !== currentAxis) && (currentAxis === this.info.previousAxesState[i]) && (currentAxis !== 0 && currentAxis !== -0);\r\n\t\t\tconst hasPreviousState = this.info.previousAxesState[i] !== undefined;\r\n\t\t\t// Can only calculate this if there was a previousAxesState\r\n\t\t\tlet axisUpdateRangeMet = false;\r\n\t\t\t// If the axis is different then the initial stick drift of the analog\r\n\t\t\tconst axisDifferentFromInitialStickDrift = (this.info.initialAxesStickDrift[i] !== undefined) && currentAxis !== this.info.initialAxesStickDrift[i];\r\n\t\t\t// If there is a previous state then we calculate if the range the analog has moved is enough to consider it an update\r\n\t\t\tif (hasPreviousState) {\r\n\t\t\t\taxisUpdateRangeMet = Math.abs(currentAxis - this.info.previousAxesState[i]) >= Controller.AXIS_UPDATE_RANGE;\r\n\t\t\t// If there is no previous state then this must mean the user has never touched the analog and we need to store the initial \"stick drift\" of this analog to check against in the future ticks to prevent non user axis changes from being called.\r\n\t\t\t} else {\r\n\t\t\t\t// In the event the analog had no previous state but the new axis is different then the stored initial stick drift then the analog has been moved\r\n\t\t\t\tif (axisDifferentFromInitialStickDrift) {\r\n\t\t\t\t\taxisUpdateRangeMet = Math.abs(currentAxis - this.info.initialAxesStickDrift[i]) >= Controller.AXIS_UPDATE_RANGE;\r\n\t\t\t\t// Otherwise store the initial axis stick drift\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.info.initialAxesStickDrift[i] = currentAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// If the axis is not the same as the initial stick drift then it means the user has touched the analog\r\n\t\t\tif (axisDifferentFromInitialStickDrift) {\r\n\t\t\t\t/**\r\n\t\t\t\t * @todo Simplify into a function call because this code is repeated.\r\n\t\t\t\t */\r\n\t\t\t\taxisUpdateRangeMet = Math.abs(currentAxis - this.info.initialAxesStickDrift[i]) >= Controller.AXIS_UPDATE_RANGE;\r\n\t\t\t}\r\n\r\n\t\t\t// If there is user input then handle events\r\n\t\t\tif (axisStillHeld || axisUpdateRangeMet) {\r\n\t\t\t\tswitch (Controller.AXES_REVERSED_MAP[i]) {\r\n\t\t\t\t\tcase 'LEFT_X':\r\n\t\t\t\t\tcase 'LEFT_Y':\r\n\t\t\t\t\t\tif (!this.leftAnalogHeld && !hasPreviousState) {\r\n\t\t\t\t\t\t\tthis.leftAnalogHeld = true;\r\n\t\t\t\t\t\t\tthis.handleGrabAnalog('LEFT');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'RIGHT_X':\r\n\t\t\t\t\tcase 'RIGHT_Y':\r\n\t\t\t\t\t\tif (!this.rightAnalogHeld && !hasPreviousState) {\r\n\t\t\t\t\t\t\tthis.rightAnalogHeld = true;\r\n\t\t\t\t\t\t\tthis.handleGrabAnalog('RIGHT');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.handleAxisInput(i, currentAxis, axisStillHeld);\r\n\t\t\t\tthis.info.previousAxesState[i] = currentAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Gets the current buttons pressed down on the gamepad.\r\n\t */\r\n\tgetPressed() {\r\n\t\tconst buttonsDown = [];\r\n\t\tfor (const button in this.pressed) {\r\n\t\t\t// If this button is currently pressed down add it to the array to return.\r\n\t\t\tif (this.pressed[button]) {\r\n\t\t\t\tbuttonsDown.push(button);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn buttonsDown;\r\n\t}\r\n    /**\r\n     * Attaches a callback to the specified event.\r\n\t * \r\n     * @param {Event['event']} pEvent - The event to attach the callback to\r\n     * @param {Event['callback']} pCallback - The function to be called when the event is triggered\r\n     * @return {Controller} The Controller instance\r\n     */\r\n\ton(pEvent, pCallback) {\r\n\t\tif (typeof(pEvent) === 'string') {\r\n\t\t\tif (typeof(pCallback) === 'function') {\r\n\t\t\t\tswitch (pEvent) {\r\n\t\t\t\t\tcase 'press':\r\n\t\t\t\t\t\tthis.pressHandlers[pEvent] = pCallback;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'release':\r\n\t\t\t\t\t\tthis.releaseHandlers[pEvent] = pCallback;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'axis':\r\n\t\t\t\t\tcase 'grab':\r\n\t\t\t\t\tcase 'drop':\r\n\t\t\t\t\t\tthis.axisHandlers[pEvent] = pCallback;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tGamepadManager.logger.prefix('Gamepad-Module').error(`The event \"${pEvent}\" is not supported.`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tGamepadManager.logger.prefix('Gamepad-Module').error(`The callback for event \"${pEvent}\" is not a function.`);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n    /**\r\n     * Removes a callback from the specified event.\r\n\t * \r\n     * @param {Event['event']} pEvent - The event to remove the callback from\r\n     * @return {Controller} The Controller instance\r\n     */\t\r\n\toff(pEvent) {\r\n\t\tif (typeof(pEvent) === 'string') {\r\n\t\t\tif (typeof(pCallback) === 'function') {\r\n\t\t\t\tswitch (pEvent) {\r\n\t\t\t\t\tcase 'press':\r\n\t\t\t\t\t\tthis.pressHandlers[pEvent] = null;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'release':\r\n\t\t\t\t\t\tthis.releaseHandlers[pEvent] = null;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'axis':\r\n\t\t\t\t\tcase 'grab':\r\n\t\t\t\t\tcase 'drop':\r\n\t\t\t\t\t\tthis.axisHandlers[pEvent] = null;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tGamepadManager.logger.prefix('Gamepad-Module').error(`The event \"${pEvent}\" is not supported.`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tGamepadManager.logger.prefix('Gamepad-Module').error(`The callback for event \"${pEvent}\" is not a function.`);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Handles the input on the buttons.\r\n\t * \r\n\t * @param {number} pButton - The button index that was pressed\r\n\t * @param {number} pValue - The value of the button (0 for unpressed, 1 for pressed) 0-1 for buttons that have a range\r\n\t * @param {boolean} pRepeat - Whether this button is still being held from a previous frame\r\n\t * @param {boolean} pPressed - Whether this button is being pressed in this current frame.\r\n\t */\r\n\thandleButtonInput(pButton, pValue, pRepeat, pPressed) {\r\n\t\tlet buttonName = pButton;\r\n\t\tlet clampedValue = Math.floor(pValue * 100) / 100;\r\n\r\n\t\t// Check if button is mapped\r\n\t\tfor (const button in this.config.buttons) {\r\n\t\t\tif (this.config.buttons[button] === pButton) {\r\n\t\t\t\tbuttonName = button;\r\n\t\t\t\t// Only set the value to pressed if it actually is pressed, don't set it to false via pPressed, as it will be set to false after the release event is called\r\n\t\t\t\t// We also check if the value is greater or equal to the triggers pressed value. This is due to a trigger not being considered to be pressed unless its passed or at this threshold.\r\n\t\t\t\tif (pPressed || clampedValue > Controller.UNPRESSED) this.pressed[buttonName] = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check if any of the main buttons need to be remapped for a PlayStation controller\r\n\t\tif (buttonName === 'A' || buttonName === 'B' || buttonName === 'X' || buttonName === 'Y') {\r\n\t\t\t// If this controller is a playstation controller\r\n\t\t\tif (this.type === 'PS') {\r\n\t\t\t\t// Change the XBOX controls to Playstation controller controls\r\n\t\t\t\tbuttonName = Controller.PS4_REMAPPED[buttonName];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (buttonName) {\r\n\t\t\t// Press\r\n\t\t\tif (clampedValue <= Controller.PRESSED && clampedValue > Controller.UNPRESSED) {\r\n\t\t\t\tif (typeof(this.pressHandlers['press']) === 'function') this.pressHandlers['press'](buttonName, clampedValue, pRepeat);\r\n\t\t\t// Release\r\n\t\t\t} else if (clampedValue === Controller.UNPRESSED && (buttonName === 'LT' || buttonName === 'RT') && this.pressed[buttonName]) {\r\n\t\t\t\tif (typeof(this.releaseHandlers['release']) === 'function') this.releaseHandlers['release'](buttonName, clampedValue);\r\n\t\t\t\tthis.pressed[buttonName] = false;\r\n\t\t\t// Release\r\n\t\t\t} else if (clampedValue === Controller.UNPRESSED && this.pressed[buttonName]) {\r\n\t\t\t\tif (typeof(this.releaseHandlers['release']) === 'function') this.releaseHandlers['release'](buttonName, clampedValue);\r\n\t\t\t\tthis.pressed[buttonName] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Handles the input on the analogs.\r\n\t * \r\n\t * @param {number} pAxis - The axis index that was moved\r\n\t * @param {number} pValue - The value of the axis that was moved (0-1 range)\r\n\t * @param {boolean} pRepeat - Whether this axes is still the same from a previous frame\r\n\t */\r\n\thandleAxisInput(pAxis, pValue, pRepeat) {\r\n\t\tlet axisName = pAxis;\r\n\t\t// Clamp value to hundreths position just for easier calculations\r\n\t\tlet clampedValue = Math.floor(pValue * 100) / 100;\r\n\t\t// Check if axis is mapped\r\n\t\tfor (const axes in Controller.AXES) {\r\n\t\t\tif (Controller.AXES[axes] === pAxis) {\r\n\t\t\t\taxisName = axes;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// The angle the axis is in\r\n\t\tlet analogAngle = 0;\r\n\t\r\n\t\tif (axisName === 'LEFT_X' || axisName === 'LEFT_Y') {\r\n\t\t\tif (axisName === 'LEFT_X') {\r\n\t\t\t\tthis.leftAnalogPos.x = clampedValue;\r\n\t\t\t}\r\n\t\t\tif (axisName === 'LEFT_Y') {\r\n\t\t\t\tthis.leftAnalogPos.y = clampedValue;\r\n\t\t\t}\r\n\t\t\tanalogAngle = GamepadManager.constructor.getAngle(Controller.baseAnalogPos, this.leftAnalogPos);\r\n\t\t}\r\n\t\t\r\n\t\tif (axisName === 'RIGHT_X' || axisName === 'RIGHT_Y') {\r\n\t\t\tif (axisName === 'RIGHT_X') {\r\n\t\t\t\tthis.rightAnalogPos.x = clampedValue;\r\n\t\t\t}\r\n\t\t\tif (axisName === 'RIGHT_Y') {\r\n\t\t\t\tthis.rightAnalogPos.y = clampedValue;\r\n\t\t\t}\r\n\t\t\tanalogAngle = GamepadManager.constructor.getAngle(Controller.baseAnalogPos, this.rightAnalogPos);\r\n\t\t}\r\n\r\n\t\tif (axisName) {\r\n\t\t\tif (typeof(this.axisHandlers['axis']) === 'function') this.axisHandlers['axis'](axisName, clampedValue, analogAngle, pRepeat);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Handles the event for when a analog is grabbed.\r\n\t * \r\n\t * @param {string} pAnalog - Analog that was grabbed\r\n\t */\r\n\thandleGrabAnalog(pAnalog) {\r\n\t\tif (pAnalog) {\r\n\t\t\tif (typeof(this.axisHandlers['grab']) === 'function') this.axisHandlers['grab'](pAnalog);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Handles the event for when a analog is dropped.\r\n\t * \r\n\t * @param {string} pAnalog - Analog that was dropped\r\n\t */\r\n\thandleDropAnalog(pAnalog) {\r\n\t\tif (pAnalog) {\r\n\t\t\tif (typeof(this.axisHandlers['drop']) === 'function') this.axisHandlers['drop'](pAnalog);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Whether the left analog is being held\r\n\t * \r\n\t * @returns {boolean}\r\n\t */\r\n\tisLeftAnalogHeld() {\r\n\t\treturn this.leftAnalogHeld;\r\n\t}\r\n\t/**\r\n\t * Whether the right analog is being held\r\n\t * \r\n\t * @returns {boolean}\r\n\t */\r\n\tisRightAnalogHeld() {\r\n\t\treturn this.rightAnalogHeld;\r\n\t}\r\n\t/**\r\n\t * Checks whether a button is pressed down or not\r\n\t * \r\n\t * @param {string} pButtonName - The button to check if its pressed\r\n\t * @returns {boolean}\r\n\t */\r\n\tisButtonPressed(pButtonName) {\r\n\t\treturn this.pressed[pButtonName];\r\n\t}\r\n\t/**\r\n\t * Vibrate the controller (experimental)\r\n\t * \r\n\t * dual-rumble: Dual-rumble describes a haptic configuration with an eccentric rotating mass vibration motor in each handle of a standard gamepad. \r\n\t * In this configuration, either motor is capable of vibrating the whole gamepad. \r\n\t * The two masses are unequal so that the effects of each can be combined to create more complex haptic effects.\r\n\t * \r\n\t * @param {string} pVibrationType - The type of rumble. \"dual-rumble\", or \"vibration\"\r\n\t * @param {number} pStartDelay - The start delay before the vibration occurs in ms\r\n\t * @param {number} pWeakMagnitude - The magnitude of the weak actuator (between 0 and 1).\r\n\t * @param {number} pStrongMagnitude - The magnitude of the strong actuator (between 0 and 1).\r\n\t */\r\n\tvibrate(pVibrationType = 'dual-rumble', pStartDelay=0, pDuration=1000, pWeakMagnitude=1, pStrongMagnitude=1) {\r\n\t\tif (!('vibrationActuator' in this.gamepad)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// If a invalid pVibrationType is passed, default it\r\n\t\tif (pVibrationType !== 'dual-rumble' || pVibrationType !== 'vibration') pVibrationType = 'dual-rumble';\r\n\t\t// A new call to playEffect() overrides a previous ongoing call.\r\n\t\tthis.gamepad.vibrationActuator.playEffect(pVibrationType, {\r\n\t\t\tstartDelay: pStartDelay,\r\n\t\t\tduration: pDuration,\r\n\t\t\tweakMagnitude: pWeakMagnitude,\r\n\t\t\tstrongMagnitude: pStrongMagnitude,\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * The pulse() method of the GamepadHapticActuator interface makes the hardware pulse at a certain intensity for a specified duration. (From MDN)\r\n\t * \r\n\t * @param {number} pValue - A double representing the intensity of the pulse. This can vary depending on the hardware type, but generally takes a value between 0.0 (no intensity) and 1.0 (full intensity).\r\n\t * @param {number} pDuration - A double representing the duration of the pulse, in milliseconds.\r\n\t */\r\n\tpulse(pValue=1, pDuration=200) {\r\n\t\tif (!('hapticActuators' in this.gamepad)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.gamepad.hapticActuators[0].pulse(pValue, pDuration);\r\n\t}\r\n}\r\n\r\nexport { Controller };",
    "static": true,
    "longname": "C:/Users/jared/Documents/Github/Gamepad/src/controller.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Controller",
    "memberof": "src/controller.mjs",
    "static": true,
    "longname": "src/controller.mjs~Controller",
    "access": "public",
    "export": true,
    "importPath": "gamepad/src/controller.mjs",
    "importStyle": "{Controller}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "config",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#config",
    "access": "public",
    "description": "Configuration of which buttons / analogs map to which indexes",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "leftAnalogHeld",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#leftAnalogHeld",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "rightAnalogHeld",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#rightAnalogHeld",
    "access": "public",
    "description": "Whether the right analog is currently being held",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "baseAnalogPos",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.baseAnalogPos",
    "access": "public",
    "description": "The base analogs position when it is not in use",
    "lineNumber": 28,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "AXES",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.AXES",
    "access": "public",
    "description": "Analog thumb sticks",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "AXES_REVERSED_MAP",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.AXES_REVERSED_MAP",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "AXIS_UPDATE_RANGE",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.AXIS_UPDATE_RANGE",
    "access": "public",
    "description": "The range at which axis changes are detected",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "ANALOG_RELEASE_RANGE",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.ANALOG_RELEASE_RANGE",
    "access": "public",
    "description": "The range at which the analog is considered to be dropped -0.09 - 0.09",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "TRIGGER_PRESSED_VALUE",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.TRIGGER_PRESSED_VALUE",
    "access": "public",
    "description": "The value at which holding a trigger (LT OR RT) will consider it being pressed",
    "lineNumber": 64,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "PRESSED",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.PRESSED",
    "access": "public",
    "description": "Value to indicate a pressed button",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "UNPRESSED",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.UNPRESSED",
    "access": "public",
    "description": "Value to indicate a button is not pressed",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "BUTTONS_MAP",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.BUTTONS_MAP",
    "access": "public",
    "description": "A button map that maps common button names to the indexes the computer knows them as",
    "lineNumber": 80,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "BUTTONS_REVERSE_MAP",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.BUTTONS_REVERSE_MAP",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "PS4_REMAPPED",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.PS4_REMAPPED",
    "access": "public",
    "description": "A small remapped version of the controllers button_map with PS4 alternatives",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "GAMEPAD_IDS",
    "memberof": "src/controller.mjs~Controller",
    "static": true,
    "longname": "src/controller.mjs~Controller.GAMEPAD_IDS",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "pressed",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#pressed",
    "access": "public",
    "description": "Object full of the currently held down buttons",
    "lineNumber": 163,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "info",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#info",
    "access": "public",
    "description": "Info about the controller",
    "lineNumber": 175,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "leftAnalogPos",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#leftAnalogPos",
    "access": "public",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "rightAnalogPos",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#rightAnalogPos",
    "access": "public",
    "description": "The right analogs position",
    "lineNumber": 189,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "pressHandlers",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#pressHandlers",
    "access": "public",
    "description": "Object of stored callback that will call when a button is pressed",
    "lineNumber": 195,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "releaseHandlers",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#releaseHandlers",
    "access": "public",
    "description": "Object of stored callback that will call when a button is released",
    "lineNumber": 201,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "axisHandlers",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#axisHandlers",
    "access": "public",
    "description": "Object of stored callbacks that will call when the axis is changed",
    "lineNumber": 207,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#constructor",
    "access": "public",
    "description": "Creates a new controller instance and passes the gamepad it will be created with",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "Gamepad"
        ],
        "spread": false,
        "optional": false,
        "name": "pGamepad",
        "description": "A gamepad object"
      }
    ]
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "gamepad",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#gamepad",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "type",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#type",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getType",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#getType",
    "access": "public",
    "description": "Returns the type the controller is. PC / PS / Xbox / Android",
    "lineNumber": 222,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "updateState",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#updateState",
    "access": "public",
    "description": "Update the state of this controller with the latest polled information",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "Gamepad"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "The gamepad with the new updated state"
      },
      {
        "nullable": null,
        "types": [
          "Controller"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "The gamepad controller instance"
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "getPressed",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#getPressed",
    "access": "public",
    "description": "Gets the current buttons pressed down on the gamepad.",
    "lineNumber": 340,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "on",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#on",
    "access": "public",
    "description": "Attaches a callback to the specified event.",
    "lineNumber": 357,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event['event']"
        ],
        "spread": false,
        "optional": false,
        "name": "pEvent",
        "description": "The event to attach the callback to"
      },
      {
        "nullable": null,
        "types": [
          "Event['callback']"
        ],
        "spread": false,
        "optional": false,
        "name": "pCallback",
        "description": "The function to be called when the event is triggered"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Controller"
      ],
      "spread": false,
      "description": "The Controller instance"
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "off",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#off",
    "access": "public",
    "description": "Removes a callback from the specified event.",
    "lineNumber": 387,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event['event']"
        ],
        "spread": false,
        "optional": false,
        "name": "pEvent",
        "description": "The event to remove the callback from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Controller"
      ],
      "spread": false,
      "description": "The Controller instance"
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "handleButtonInput",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#handleButtonInput",
    "access": "public",
    "description": "Handles the input on the buttons.",
    "lineNumber": 419,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pButton",
        "description": "The button index that was pressed"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pValue",
        "description": "The value of the button (0 for unpressed, 1 for pressed) 0-1 for buttons that have a range"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "pRepeat",
        "description": "Whether this button is still being held from a previous frame"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "pPressed",
        "description": "Whether this button is being pressed in this current frame."
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "handleAxisInput",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#handleAxisInput",
    "access": "public",
    "description": "Handles the input on the analogs.",
    "lineNumber": 464,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pAxis",
        "description": "The axis index that was moved"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pValue",
        "description": "The value of the axis that was moved (0-1 range)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "pRepeat",
        "description": "Whether this axes is still the same from a previous frame"
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "handleGrabAnalog",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#handleGrabAnalog",
    "access": "public",
    "description": "Handles the event for when a analog is grabbed.",
    "lineNumber": 507,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pAnalog",
        "description": "Analog that was grabbed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "handleDropAnalog",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#handleDropAnalog",
    "access": "public",
    "description": "Handles the event for when a analog is dropped.",
    "lineNumber": 517,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pAnalog",
        "description": "Analog that was dropped"
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "isLeftAnalogHeld",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#isLeftAnalogHeld",
    "access": "public",
    "description": "Whether the left analog is being held",
    "lineNumber": 527,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "isRightAnalogHeld",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#isRightAnalogHeld",
    "access": "public",
    "description": "Whether the right analog is being held",
    "lineNumber": 535,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "isButtonPressed",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#isButtonPressed",
    "access": "public",
    "description": "Checks whether a button is pressed down or not",
    "lineNumber": 544,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pButtonName",
        "description": "The button to check if its pressed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "vibrate",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#vibrate",
    "access": "public",
    "description": "Vibrate the controller (experimental)\n\ndual-rumble: Dual-rumble describes a haptic configuration with an eccentric rotating mass vibration motor in each handle of a standard gamepad. \nIn this configuration, either motor is capable of vibrating the whole gamepad. \nThe two masses are unequal so that the effects of each can be combined to create more complex haptic effects.",
    "lineNumber": 559,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pVibrationType",
        "description": "The type of rumble. \"dual-rumble\", or \"vibration\""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartDelay",
        "description": "The start delay before the vibration occurs in ms"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pWeakMagnitude",
        "description": "The magnitude of the weak actuator (between 0 and 1)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStrongMagnitude",
        "description": "The magnitude of the strong actuator (between 0 and 1)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "pulse",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#pulse",
    "access": "public",
    "description": "The pulse() method of the GamepadHapticActuator interface makes the hardware pulse at a certain intensity for a specified duration. (From MDN)",
    "lineNumber": 579,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pValue",
        "description": "A double representing the intensity of the pulse. This can vary depending on the hardware type, but generally takes a value between 0.0 (no intensity) and 1.0 (full intensity)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pDuration",
        "description": "A double representing the duration of the pulse, in milliseconds."
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/gamepad.mjs",
    "content": "\r\nimport { Controller } from './controller.mjs';\r\nimport { Logger } from './vendor/logger.min.mjs';\r\n\r\n/**\r\n * A gamepadmanager to help with games / handling input from a controller\r\n * @class GamepadManagerSingleton\r\n * @license GamepadManager does not have a license at this time. For licensing contact the author\r\n * @author https://github.com/doubleactii\r\n * @todo Currently bluetooth gamepads when disconnecting (PS4 only) do no fire a disconnected event. Manually calling `this.gamepad.vibrationActuator.reset()` can force it to call a disconnect event, but \r\n * this is a messy way of checking each tick to see if the gamepad is still connected. It also will cancel ongoing vibrations. Find a fix. (This is a GamepadAPI issue/OS issue/not code wise issue)\r\n */\r\nclass GamepadManagerSingleton {\r\n\t/**\r\n\t * Object containing all connected controllers\r\n\t * \r\n\t * @type {Object}\r\n\t */\r\n\tcontrollers = {};\r\n\t/**\r\n\t * Object containing the callback for when a controller is connected\r\n\t * \r\n\t * @type {Object}\r\n\t */\r\n\tconnectHandler = {};\r\n\t/**\r\n\t * Object containing the callback for when a controller is disconnected\r\n\t * \r\n\t * @type {Object}\r\n\t */\r\n\tdisconnectHandler = {};\r\n\t/**\r\n\t * The version of the module.\r\n\t */\r\n\tversion = \"VERSION_REPLACE_ME\";\r\n\t/**\r\n\t * Creates the instance and assigns event handlers to gamepad events\r\n\t */\r\n\tconstructor() {\r\n\r\n        /** The logger module this module uses to log errors / logs.\r\n         * @private\r\n         * @type {Object}\r\n         */\r\n        this.logger = new Logger();\r\n        this.logger.registerType('Gamepad-Module', '#ff6600');\r\n\r\n\t\t// Bind this class instance to the event handlers\r\n\t\tthis.handleGamepadConnected = this.handleGamepadConnected.bind(this);\r\n\t\tthis.handleGamepadDisconnected = this.handleGamepadDisconnected.bind(this);\r\n\t\tthis.pollGamepadState = this.pollGamepadState.bind(this);\r\n\r\n\t\t// Check for gamepad support\r\n\t\tif ('getGamepads' in navigator) {\r\n\t\t\twindow.addEventListener('gamepadconnected', this.handleGamepadConnected);\r\n\t\t\twindow.addEventListener('gamepaddisconnected', this.handleGamepadDisconnected);\r\n\t\t\trequestAnimationFrame(this.pollGamepadState);\r\n\t\t} else {\r\n\t\t\tthis.logger.prefix('Gamepad-Module').warn('Gamepad API not supported in this browser.');\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Gets the angle between two points\r\n\t * \r\n\t * @param {Object} pStartPoint - The starting point\r\n\t * @param {Object} pEndPoint - The ending point\r\n\t * @returns {number} The angle between the starting point and the ending point\r\n\t */\r\n\tstatic getAngle(pStartPoint, pEndPoint) {\r\n\t\tconst y = pStartPoint.y - pEndPoint.y;\r\n\t\tconst x = pStartPoint.x - pEndPoint.x;\r\n\t\treturn -Math.atan2(y, x) - Math.PI;\r\n\t}\r\n\t/**\r\n\t * This gets the first controller connected. This controller is dominant\r\n\t * \r\n\t * @returns {Gamepad} The first controller connected\r\n\t */\r\n\tgetMainController() {\r\n\t\treturn this.controllers['0'];\r\n\t}\r\n\t/**\r\n\t * @returns {Array} An array of all connected controllers\r\n\t */\r\n\tgetControllers() {\r\n\t\treturn { ...this.controllers };\r\n\t}\r\n    /**\r\n     * Attaches a callback to the specified event.\r\n\t * \r\n     * @param {Object} pEvent - The event to attach the callback to\r\n     * @param {Function} pCallback - The function to be called when the event is triggered\r\n     * @return {GamepadManagerSingleton} The GamepadManagerSingleton instance\r\n     */\r\n\ton(pEvent, pCallback) {\r\n\t\tif (typeof(pEvent) === 'string') {\r\n\t\t\tif (typeof(pCallback) === 'function') {\r\n\t\t\t\tswitch (pEvent) {\r\n\t\t\t\t\tcase 'connect':\r\n\t\t\t\t\t\tthis.connectHandler[pEvent] = pCallback;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'disconnect':\r\n\t\t\t\t\t\tthis.disconnectHandler[pEvent] = pCallback;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthis.logger.prefix('Gamepad-Module').error(`The event \"${pEvent}\" is not supported.`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.logger.prefix('Gamepad-Module').error(`The callback for event \"${pEvent}\" is not a function.`);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Listener function for when a gamepad is connected\r\n\t * \r\n\t * @param {pGamepadEvent} - A gamepad event\r\n\t */\r\n\thandleGamepadConnected(pGamepadEvent) {\r\n\t\t// Create a controller from the gamepad that was connected\r\n\t\t// This controller only saves a snapshot of the data of when it was first created, but we update it based on new polled data\r\n\t\tthis.controllers[pGamepadEvent.gamepad.index] = new Controller(pGamepadEvent.gamepad);\r\n\t\tif (typeof(this.connectHandler.connect) === 'function') this.connectHandler.connect(this.controllers[pGamepadEvent.gamepad.index]);\r\n\t}\r\n\t/**\r\n\t * Listener function for when the gamepad is disconnected\r\n\t * \r\n\t * @param {pGamepadEvent} - A gamepad event\r\n\t */\r\n\thandleGamepadDisconnected(pGamepadEvent) {\r\n\t\t// Delete the controller when it's disconnected\r\n\t\t// Maybe add a option to save gamepad info for a short while, incase it disconnected due to battery? \r\n\t\t// When reconnected it can prompt an alert that says \"restore configuration for gamepad\". This will restore that configuration to the controller.\r\n\t\tif (typeof(this.disconnectHandler.disconnect) === 'function') this.disconnectHandler.disconnect(this.controllers[pGamepadEvent.gamepad.index]);\r\n\t\tdelete this.controllers[pGamepadEvent.gamepad.index];\r\n\t}\r\n\t/**\r\n\t * Get the latest game state of the connected gamepads (Chrome only saves snapshots of the state, we have to keep polling to get updated states)\r\n\t */\r\n\tpollGamepadState() {\r\n\t\tconst gamepads = navigator.getGamepads();\r\n\t\tif (!gamepads) return;\r\n\t\t// Loop through all connected controllers and update their state\r\n\t\tfor (const gamepad of gamepads) {\r\n\t\t\t// Can be null if disconnected during the session\r\n\t\t\tif (gamepad) {\r\n\t\t\t\tfor (const controller in this.controllers) {\r\n\t\t\t\t\t// Make sure we are updating the correct controller with the right data from the gamepad at the same index\r\n\t\t\t\t\tif (gamepad.index === this.controllers[controller].gamepad.index) {\r\n\t\t\t\t\t\tthis.controllers[controller].updateState(gamepad);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\trequestAnimationFrame(this.pollGamepadState);\r\n\t}\r\n}\r\n\r\n\r\nexport const GamepadManager = new GamepadManagerSingleton();\r\n",
    "static": true,
    "longname": "C:/Users/jared/Documents/Github/Gamepad/src/gamepad.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "GamepadManager",
    "memberof": "src/gamepad.mjs",
    "static": true,
    "longname": "src/gamepad.mjs~GamepadManager",
    "access": "public",
    "export": true,
    "importPath": "gamepad",
    "importStyle": "{GamepadManager}",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "type": {
      "types": [
        "src/gamepad.mjs~GamepadManagerSingleton"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "GamepadManagerSingleton",
    "memberof": "src/gamepad.mjs",
    "static": true,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton",
    "access": "public",
    "export": true,
    "importPath": "gamepad",
    "importStyle": null,
    "description": "A gamepadmanager to help with games / handling input from a controller",
    "lineNumber": 13,
    "todo": [
      "Currently bluetooth gamepads when disconnecting (PS4 only) do no fire a disconnected event. Manually calling `this.gamepad.vibrationActuator.reset()` can force it to call a disconnect event, but \nthis is a messy way of checking each tick to see if the gamepad is still connected. It also will cancel ongoing vibrations. Find a fix. (This is a GamepadAPI issue/OS issue/not code wise issue)"
    ],
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "GamepadManagerSingleton"
      },
      {
        "tagName": "@license",
        "tagValue": "GamepadManager does not have a license at this time. For licensing contact the author"
      },
      {
        "tagName": "@author",
        "tagValue": "https://github.com/doubleactii"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "controllers",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#controllers",
    "access": "public",
    "description": "Object containing all connected controllers",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "connectHandler",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#connectHandler",
    "access": "public",
    "description": "Object containing the callback for when a controller is connected",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "disconnectHandler",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#disconnectHandler",
    "access": "public",
    "description": "Object containing the callback for when a controller is disconnected",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "version",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#version",
    "access": "public",
    "description": "The version of the module.",
    "lineNumber": 35,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#constructor",
    "access": "public",
    "description": "Creates the instance and assigns event handlers to gamepad events",
    "lineNumber": 39
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "logger",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#logger",
    "access": "private",
    "description": "The logger module this module uses to log errors / logs.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getAngle",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton.getAngle",
    "access": "public",
    "description": "Gets the angle between two points",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The angle between the starting point and the ending point"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartPoint",
        "description": "The starting point"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndPoint",
        "description": "The ending point"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The angle between the starting point and the ending point"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "getMainController",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#getMainController",
    "access": "public",
    "description": "This gets the first controller connected. This controller is dominant",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Gamepad} The first controller connected"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Gamepad"
      ],
      "spread": false,
      "description": "The first controller connected"
    },
    "params": []
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "getControllers",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#getControllers",
    "access": "public",
    "description": "",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} An array of all connected controllers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of all connected controllers"
    },
    "params": []
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "on",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#on",
    "access": "public",
    "description": "Attaches a callback to the specified event.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEvent",
        "description": "The event to attach the callback to"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pCallback",
        "description": "The function to be called when the event is triggered"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GamepadManagerSingleton"
      ],
      "spread": false,
      "description": "The GamepadManagerSingleton instance"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "handleGamepadConnected",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#handleGamepadConnected",
    "access": "public",
    "description": "Listener function for when a gamepad is connected",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "pGamepadEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "A gamepad event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "handleGamepadDisconnected",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#handleGamepadDisconnected",
    "access": "public",
    "description": "Listener function for when the gamepad is disconnected",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "pGamepadEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "A gamepad event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "pollGamepadState",
    "memberof": "src/gamepad.mjs~GamepadManagerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gamepad.mjs~GamepadManagerSingleton#pollGamepadState",
    "access": "public",
    "description": "Get the latest game state of the connected gamepads (Chrome only saves snapshots of the state, we have to keep polling to get updated states)",
    "lineNumber": 142,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "# GamepadManager Module\r\nGamepadManager is a Javascript library that provides an easy way to handle input from game controllers. It is designed to work with the Gamepad API, which is a browser API that provides access to gamepad devices. This library is useful for games and other applications that require input from a game controller.\r\n\r\n## Installation\r\n\r\n### ES Module\r\n\r\n```js\r\nimport { GamepadManager } from './gamepad.mjs';\r\n```\r\n\r\n### IIFE (Immediately Invoked Function Expression)\r\n\r\n```js\r\n<script src=\"gamepad.js\"></script>;\r\n// ...\r\nwindow.GamepadBundle.GamepadManager;\r\n```\r\n\r\n# Features\r\nHandles input from multiple game controllers simultaneously.\r\nSupports all types of game controllers supported by the Gamepad API, including Bluetooth controllers.\r\nProvides an easy-to-use API for accessing input from game controllers.\r\nIncludes event handlers for detecting when game controllers are connected or disconnected.\r\nSupports remapping of controller buttons to match different controller layouts.\r\n\r\n# Usage\r\n\r\nThe GamepadManager object provides several methods for accessing input from game controllers. For example, you can get the main controller like this:\r\n\r\n```js\r\nvar controller = GamepadManager.getMainController();\r\n```\r\n\r\nYou can also get a list of all connected controllers like this:\r\n\r\n```js\r\nvar controllers = GamepadManager.getControllers();\r\n```\r\nThe GamepadManager object also includes event handlers for detecting when game controllers are connected or disconnected. For example, to handle the \"connect\" event, you can use the following code:\r\n\r\n```js\r\nGamepadManager.on('connect', function(pController) {\r\n    // Do something when a controller is connected.\r\n    pController.on('press', (pButtonName, pValue, pRepeat) => {\r\n        // Do something when a controller presses a button\r\n    }).on('release', (pButtonName, pValue) => {\r\n        // Do something when a controller releases a button\r\n    }).on('axis', (pAxisName, pValue, pAngle, pRepeat) => {\r\n        // Do something when a controller moves its analogs\r\n    }).on('grab', (pAnalogName) => {\r\n        // Do something when an analog is touched or moved from the \"drop off zone\" (center position)\r\n    }).on('drop', (pAnalogName) => {\r\n        // Do something when an analog is not being touched anymore or has been moved to the \"drop off zone\" (center position)\r\n    });\r\n\r\n    pController.vibrate('dual-rumble', 0, 1000, 1, 1); // Vibrate the controller with customizable settings\r\n    pController.isLeftAnalogHeld(); // Returns a boolean\r\n    pController.isRightAnalogHeld(); // Returns a boolean\r\n    pController.isButtonPressed('A'); // Returns a boolean\r\n    pController.getType(); // Returns the type this controller is. PC / PS / Xbox/ Android\r\n});\r\n\r\nGamepadManager.on('disconnect', function(pController) {\r\n    // Do something when a controller is disconnected.\r\n});\r\n```\r\n# License\r\nGamepadManager is free software, available under the terms of a MIT style License.\r\n\r\n# Author\r\nGamepadManager was created by doubleactii.\r\n\r\n# [Docs](https://evitcastudio.github.io/Gamepad/)\r\n\r\n# TODO\r\nCurrently, Bluetooth gamepads when disconnecting (PS4 only) do not fire a disconnected event. Manually calling this.gamepad.vibrationActuator.reset() can force it to call a disconnect event, but this is a messy way of checking each tick to see if the gamepad is still connected. It also will cancel ongoing vibrations. A fix needs to be found. (This is a GamepadAPI issue/OS issue/not a code-wise issue)\r\n\r\n### Global Dependency\r\n\r\nGamepad relies on the `VYLO` variable being globally accessible.\r\n",
    "longname": "C:\\Users\\jared\\Documents\\Github\\Gamepad\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"gamepad\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"A gamepadmanager to help with games / handling input from a controller\",\r\n  \"main\": \"src/gamepad.mjs\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build:rollup\": \"npx rollup -c\",\r\n    \"build:docs\": \"esdoc -c esdoc.json\",\r\n    \"build:dist\": \"npm run build:rollup && npm run build:docs\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"https://github.com/doubleactii\",\r\n  \"license\": \"MIT\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/EvitcaStudio/Gamepad\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/EvitcaStudio/Gamepad/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/EvitcaStudio/Gamepad#readme\",\r\n  \"devDependencies\": {\r\n    \"@rollup/plugin-babel\": \"^6.0.4\",\r\n    \"@rollup/plugin-terser\": \"^0.4.4\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"rollup\": \"^4.14.1\",\r\n    \"rollup-plugin-banner2\": \"^1.2.3\",\r\n    \"rollup-plugin-cleandir\": \"^2.0.0\",\r\n    \"rollup-plugin-replace\": \"^2.2.0\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\jared\\Documents\\Github\\Gamepad\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]